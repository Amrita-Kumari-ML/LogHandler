version: '3.8'

services:
  loggenerate:
    container_name: loggenerate
    build:
      context: ./LogGenerator
      dockerfile: Dockerfile
    ports:
      - "7001:8081"
    environment:
      - GENERATOR_HOST=${GENERATOR_HOST}
      - GENERATOR_PORT=${GENERATOR_PORT}
      - GENERATOR_ALIVE_URL=${GENERATOR_ALIVE_URL}
      - GENERATOR_START_URL=${GENERATOR_START_URL}
      - PARSER_API=${PARSER_API}
      - GENERATOR_RATE=${GENERATOR_RATE}
      - GENERATOR_UNIT=${GENERATOR_UNIT}
    restart: on-failure
    depends_on:
      - logparser
    networks:
      - lognetwork

  logparser:
    container_name: logparser
    build:
      context: ./LogParser
      dockerfile: Dockerfile
    ports:
      - "7002:8082"
    environment:
      - PARSER_HOST=${PARSER_HOST}
      - PARSER_PORT=${PARSER_PORT}
      - PARSER_ALIVE_URL=${PARSER_ALIVE_URL}
      - PARSER_GET_COUNT_URL=${PARSER_GET_COUNT_URL}

      - DB_PORT=${DB_PORT}
      - DB_HOST=${DB_HOST}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSLMODE=${DB_SSLMODE}
    volumes:
      - log_data:/app/data
    restart: on-failure
    depends_on:
      - postgres
    networks:
      - lognetwork

  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "7003:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - lognetwork

  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "7004:80"
    networks:
      - lognetwork
    depends_on:
      - logparser


  # Container metrics (cAdvisor)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped
    networks:
      - lognetwork

  # Prometheus time-series DB
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.retention.time=15d"
    depends_on:
      - cadvisor
    networks:
      - lognetwork

  # Grafana UI
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - lognetwork

  # Postgres exporter (DB metrics)
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres_exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    networks:
      - lognetwork

networks:
  lognetwork:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  log_data:  # Define volume for storing rate and unit data
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
