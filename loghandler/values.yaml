loggenerate:
  image:
    repository: loggenerate
    tag: 1.0.1 #latest
    pullPolicy: IfNotPresent
  port: 8081
  env:
    GENERATOR_HOST: loggenerate
    GENERATOR_PORT: ":8081"
    GENERATOR_ALIVE_URL: "/"
    GENERATOR_START_URL: "/logs"
    PARSER_API: "http://logparser:8082/logs"
    GENERATOR_RATE: 10
    GENERATOR_UNIT: "s"

logparser:
  image:
    repository: logparser
    tag: 1.0.1 #latest
    pullPolicy: IfNotPresent
  port: 8082
  env:
    PARSER_HOST: logparser
    PARSER_PORT: ":8082"
    PARSER_ALIVE_URL: "/"
    PARSER_ADD_URL: "/logs"
    PARSER_GET_URL: "/logs"
    PARSER_GET_COUNT_URL: "/logs/count"
    PARSER_DELETE_URL: "/logs"

    DB_PORT: "5432"
    DB_HOST: postgres
    DB_USERNAME: "postgres"
    DB_PASSWORD: "123456"
    DB_NAME: "logsdb"
    DB_SSLMODE: "disable"

postgres:
  image: postgres:latest
  port: 5432
  env:
    POSTGRES_USER: "postgres"
    POSTGRES_PASSWORD: "123456"
    POSTGRES_DB: "logsdb"

serviceAccount:
  create: true
  name: ""

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts: []
  tls: []
  
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80

service:
  type: ClusterIP  # Or NodePort, LoadBalancer, etc.
  port: 8081